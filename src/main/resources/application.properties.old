server.port=9090

spring.application.name=kafka-consumer
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.properties.schema.registry.url=http://localhost:8081
#spring.kafka.security.protocol=SSL
#spring.kafka.ssl.trust-store-location=classpath:kafka.server.truststore.jks
#spring.kafka.ssl.trust-store-password=password123
#spring.kafka.ssl.key-store-location=classpath:kafka.server.keystore.jks
#spring.kafka.ssl.key-store-password=password123
#spring.kafka.ssl.key-password=password123
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.properties.spring.json.trusted.packages=co.istad.kafkaconsumer.event

spring.kafka.consumer.properties.spring.json.trusted.packages=*

spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.properties.spring.json.use.type.headers=false
spring.kafka.consumer.properties.spring.json.value.default.type=*
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.properties.specific.avro.reader=false
spring.kafka.consumer.properties.value.subject.name.strategy=io.confluent.kafka.serializers.subject.TopicNameStrategy